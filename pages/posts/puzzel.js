import Head from 'next/head'
import Image from 'next/image'
import styles from '../../styles/Home.module.css'
import Link from 'next/link'

import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faArrowDown } from '@fortawesome/free-solid-svg-icons'

export default function Puzzel() {
    return (
        <>
            <div className={styles.container}>
                <Head>
                    <title>Puzzel</title>
                    <meta name="description" content="Generated by create next app" />
                    <link rel="icon" href="/favicon.ico" />
                </Head>

                <main className={styles.main}>
                    <h1 className="title">
                        Puzzel
                    </h1>
                    <div className={styles.divMaxI}>
                        <p>Tijd om eens uit te leggen hoe ik de puzzel precies heb gemaakt.</p>
                    </div>
                    {/* <p className={styles.description}>
                        Get started by editing{' '}
                        <code className={styles.code}>pages/index.js</code>
                    </p> */}

                    <div className={styles.grid}>
                        <div className={styles.cardLong}>
                            <Image className={styles.cardLongImage} src="/opdrachtenLong.png" height={175} width={800} />
                            <br></br>
                            <br></br>
                            <h2>Puzzel</h2>
                            <p className={styles.descriptionIdea}>Ontwerp</p>
                            <p>De puzzel zal een afbeelding vormen van hoe de wielen van de kluis zullen moeten gedraaid worden.</p>
                            <p>Ik nam de deur van de kluis in Cinema4D, en zette de camera op <span className={styles.codeish}>Top View</span> om de perfecte afbeelding te krijgen van mijn kluis.</p>
                            <p>Daarna was het gewoon een kwestie om de afbeelding van de kluis onder te verdelen in 9 stukken, en deze in te kleuren.</p>
                            <Image className={styles.cardLongImage} src="/puzzelSketch.png" height={175} width={800} />
                            <p className={styles.descriptionIdea}>Maken van de puzzelstukken in 3D</p>
                            <p>Na het nemen van een screenshot van mijn aparte puzzelstukken, kon in terug in Cinema4D deze stukken omzetten naar een 3D-ontwerp.</p>
                            <p>Dit ontwerp had enkel de vormen van de puzzelstukken, niet met de afbeeldingen erop.</p>
                            <p className={styles.descriptionIdea}>Puzzel naar Unity</p>
                            <p>Ik importeerde mijn 9 puzzelstukken in Unity, en plaatste de afbeeldingen van de puzzelstukken ook in mijn assets-folder.</p>
                            <p>Nu is het nog de kwestie om deze puzzelstukken te kunnen vastnemen, maar vooral om de afbeelding eerst op de puzzelstukken te plaatsen.</p>
                            <p className={styles.descriptionIdea}>Afbeeldingen op puzzel</p>
                            <p>Eerst wilde ik terug (net zoals vele andere objecten) via <span className={styles.codeish}>Materials</span> deze afbeelding op mijn puzzelstukken krijgen.</p>
                            <p>Ik wist niet precies waarom, maar de afbeelding werd op een erg rare manier vervormd.</p>
                            <Image className={styles.cardLongImage} src="/puzzleRaster.png" height={175} width={800} />
                            <p>Het is misschien niet zo goed tezien op de afbeelding, maar de materialen worden vervormd via een driehoeks-structuur.</p>
                            <p>Ik probeerde om via photoshop deze vervorming tegen te gaan, maar ik bereikte niet echt het gewenste resultaat.</p>
                            <p>Om dit op te lossen besloot ik om een UI-canvas te maken voor ieder stukje, en dit canvas als ChildElement aan het ieder puzzelstuk te geven.</p>
                            <p>Doe dit als volgt: Ga naar <span className={styles.codeish}>UI</span> &rarr; <span className={styles.codeish}>Canvas</span> en maak binnen dit canvas een <span className={styles.codeish}>Image</span> aan.</p>
                            <p>Scale deze Image (het witte vierkant dus) zodat je puzzelstuk er perfect binnen past.</p>
                            <p>Maak dan van je PNG-afbeelding van je puzzelstuk een Sprite via <span className={styles.codeish}>Texture Type</span> &rarr; <span className={styles.codeish}>Sprite (2D and UI)</span> door je afbeelding aan te klikken. Dan zal je die optie zien staan.</p>
                            <Image className={styles.cardLongImage} src="/sprite-ui-img.png" height={175} width={800} />
                            <p>De laatste stap is om je nieuwe Sprite als afbeelding te zetten binnen de Image die je daarnet aanmaakte, en voila!</p>
                            <p>Je puzzelstuk zal nu een mooie, perfecte afbeelding hebben. Doe dit proces nu voor alle stukken.</p>
                            <p className={styles.extra}>Goed om te weten</p>
                            <p>Als je puzzel bestaat uit allemaal vierkante stukken, kan je wel met Materials werken. Dit zal je heel wat tijd en prutswerk besparen.</p>
                            <br></br>
                            <p className={styles.descriptionIdea}>Puzzel sockets</p>
                            <p>Je weet ondertussen wel hoe het gaat. Zorg ervoor dat je via de <span className={styles.codeish}>XR Grab-interactable</span> je puzzelstuk &apos;vastneembaar&apos; maakt.</p>
                            <p>Om onze puzzel te kunnen maken, zullen we werken met <span className={styles.codeish}>Sockets</span></p>
                            <p>Selecteer de achtergrond waarop je puzzel zal komen. Voor ieder puzzelstuk moet je een Empty GameObject maken. Deze GameObjects zullen onze sockets worden waar onze puzzelstukken tot aangetrokken zullen worden.</p>
                            <p>Voeg een <span className={styles.codeish}>Sphere Collider</span> toe op je GameObject, samen met een <span className={styles.codeish}>XR Socket Interactor</span>.</p>
                            <p>Om ervoor te zorgen dat alleen puzzelstukken op deze socket blijven plakken, zal je eerst een nieuwe &apos;Layer&apos; moeten aanmaken. Noem deze Layer bijvoorbeeld &apos;Puzzle&apos;.</p>
                            <p>Zet nu de Layer van ieder puzzelstuk op &apos;Puzzle&apos;, en in de XR Socket Interactor component die je juist hebt aangemaakt, zet je de <span className={styles.codeish}>Interaction Layer Mask</span> op &apos;Puzzle&apos;.</p>
                            <Image className={styles.cardLongImage} src="/socketInter.png" height={175} width={800} />
                            <p>Een laatste stap is het experimenteren met Attach Transforms zoals ik eerder in deze blog al eens aankaartte.</p>
                            <p>Zorg ervoor dat je puzzelstukken mooi uitlijnen. Deze waarden en benaderingen zullen voor iedereen een beetje anders zijn, dus ga ik niet verder meer op ingaan.</p>
                        </div>
                    </div>
                    <div className={styles.flexStepButtons}>
                        <Link href="opdrachten"><p className={styles.stepButton}>&larr; previous</p></Link>
                        <Link href="kluis"><p className={styles.stepButton}>next &rarr;</p></Link>
                    </div>
                </main>

                <footer className={styles.footer}>
                    <p>by: Erin Troch</p>
                </footer>
            </div>
        </>
    )
}