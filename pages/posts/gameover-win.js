import Head from 'next/head'
import Image from 'next/image'
import styles from '../../styles/Home.module.css'
import Link from 'next/link'

import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faArrowDown } from '@fortawesome/free-solid-svg-icons'

export default function GameOverWin() {
    return (
        <>
            <div className={styles.container}>
                <Head>
                    <title>Game Over - Win</title>
                    <meta name="description" content="Generated by create next app" />
                    <link rel="icon" href="/favicon.ico" />
                </Head>

                <main className={styles.main}>
                    <h1 className="title">
                        Game Over - Win
                    </h1>
                    <div className={styles.divMaxI}>
                        <p>Alle aparte elementen zijn er eindelijk!</p>
                        <p>Maar voor we hiervan 1 verhaal maken, zal ik eerst nog een &apos;Game Over&apos; scherm, en ook een &apos;Winning&apos; scherm maken.</p>
                    </div>
                    {/* <p className={styles.description}>
                        Get started by editing{' '}
                        <code className={styles.code}>pages/index.js</code>
                    </p> */}

                    <div className={styles.grid}>
                        <div className={styles.cardLong}>
                            <Image className={styles.cardLongImage} src="/youDied.png" height={175} width={800} />
                            <br></br>
                            <br></br>
                            <h2>Game Over - Win</h2>
                            <p className={styles.descriptionIdea}>Game Over</p>
                            <p>Als je zuurstof op is, kan je natuurlijk niet doorspelen.</p>
                            <p>Ik besloot om aan de hand van een canvas terug een soort van overlay te maken, een beetje zoals onze <span className={styles.codeish}>Black Fade</span> van de overgangen van onze scenes, of de collide met de muur.</p>
                            <p>Easy peasy, toch?</p>
                            <p>FOUT!</p>
                            <p>Om de vorige overlays te maken, moesten we simpelweg de volledige view aanpassen, en een volledig <span className={styles.codeish}>UI Canvas</span> de camera laten bedekken.</p>
                            <p>Aangezien we nu met een met een halve overlay zitten waarbij je je handen wel nog moet zien, gaat dit dus niet zomaar...</p>
                            <p>Bij een UI Canvas kan je kiezen welke order-in-layer deze krijgt, in combinatie met een andere camera natuurlijk.</p>
                            <p>Bij objecten kan dit echter niet zomaar, dus moest ik voor een andere, nieuwe techniek opteren.</p>
                            <p>Ik besloot om gewoon een nieuwe scene aan te maken die puur voor de Game Over zal dienen.</p>
                            <p>In deze scene is er niet zoveel aanwezig.</p>
                            <p>Een UI Canvas, met 2 buttons en wat tekst. Ook zorgde ik voor luchtbelletjes ter opvulling van de lege scene om dit toch een beetje interessanter te maken.</p>
                            <p className={styles.descriptionIdea}>Knoppen</p>
                            <p>Deze knoppen zijn:</p>
                            <ul>
                                <li>TRY AGAIN</li>
                                <li>MENU</li>
                            </ul>
                            <p>Ze spreken voorzich. Via &apos;Try again&apos; kan je nog eens proberen, en met de &apos;Menu&apos; kan je teruggaan naar de startscene.</p>
                            <p>Ik werkte terug met de <span className={styles.codeish}>Unity.SceneManager</span> in de C# scripts om van scenes te wisselen.</p>
                            <p>De knoppen werken terug op dezelfde manier als de andere knoppen.</p>
                            <p className={styles.descriptionIdea}>Winning scene</p>
                            <p>Als de speler de escaperoom binnen de tijd haalt, moet er natuurlijk ook nog iets gebeuren.</p>
                            <p>Na het spiegelen van de laser op de laser-ontvanger, komt er een kanon tevoorschijn. Dit kanon zal via een animatie een kogel door de muur schieten, waardoor je zal ontsnappen.</p>
                            <p>Het ontsnappen zelf zal automatisch gebeuren, en je zal naar een eindscherm gestuurd worden.</p>
                            <p>Hier heb ik niet zo veel tijd aan gespendeerd aangezien dat dit niet echt de focus was van mijn game, maar maakte toch een afsluit-scene.</p>
                            <p>De speler komt eigenlijk terecht op een eiland boven water. Daar zal Josh hem / haar nog even laten weten dat hij blij is dat we het overleefden.</p>
                            <Image className={styles.cardLongImage} src="/bakedExIsland1.png" height={350} width={800} />
                        </div>
                    </div>
                    <div className={styles.flexStepButtons}>
                        <Link href="sleutels"><p className={styles.stepButton}>&larr; previous</p></Link>
                        <Link href="afwerking"><p className={styles.stepButton}>next &rarr;</p></Link>
                    </div>
                </main>

                <footer className={styles.footer}>
                    <p>by: Erin Troch</p>
                </footer>
            </div>
        </>
    )
}