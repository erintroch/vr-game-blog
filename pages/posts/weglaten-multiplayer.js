import Head from 'next/head'
import Image from 'next/image'
import styles from '../../styles/Home.module.css'
import Link from 'next/link'

import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faArrowDown } from '@fortawesome/free-solid-svg-icons'

export default function WeglatenMultiplayer() {
    return (
        <>
            <div className={styles.container}>
                <Head>
                    <title>Weglaten Multiplayer</title>
                    <meta name="description" content="Generated by create next app" />
                    <link rel="icon" href="/favicon.ico" />
                </Head>

                <main className={styles.main}>
                    <h1 className="title">
                        Weglaten Multiplayer
                    </h1>
                    <div className={styles.divMaxI}>
                        <p>In het begin van het proces had ik het erover dat mijn game wellicht een multiplayer game zou worden.</p>
                        <p>Eerder deed ik al onderzoek naar het importeren van een multiplayerfunctie, maar wegens tijdgebrek kon ik deze functie niet meer in mijn project steken.</p>
                        <p>Toch vond ik deze topic erg interessant, dus schrijf ik nog even uit hoe je alsnog een multiplayer zou kunnen toevoegen.</p>
                    </div>
                    {/* <p className={styles.description}>
                        Get started by editing{' '}
                        <code className={styles.code}>pages/index.js</code>
                    </p> */}

                    <div className={styles.grid}>
                        <div className={styles.cardLong}>
                            <h2>Multiplayer</h2>
                            <p className={styles.descriptionIdea}>Photon Setup</p>
                            <p>Om te beginnen hebben we een delevoper-kit nodig die ons helpt om ons project met een server te connecteren.</p>
                            <p>Unity zelf heeft enkele opties hiervoor, maar ik vond verschillende filmpjes waarin mensen toch opteerden voor Photon Pun.</p>
                            <p>Ga naar de <span className={styles.codeish}>Unity Asset Store</span>, en zoek voor <span className={styles.codeish}>Photon Pun</span>, en kan je deze package importeren in je project.</p>
                            <p>Om deze package te kunnen gebruiken moet je wel een Photon Account aanmaken, en blijkbaar nog enkele dingen instellen in dat account om van start te kunnen gaan.</p>
                            <p className={styles.descriptionIdea}>Photon New App</p>
                            <p>Als je account is opgezet kan je op de knop <span className={styles.codeish}>Create A New App</span> drukken, en zo zal je een informatie kunnen zien via die app over de players, en zal er een <span className={styles.codeish}>App-ID</span> worden aangemaakt.</p>
                            <p>Deze ID zal je moeten ingeven in de Photon Server Extentie in je VR-project.</p>
                            <p>De volgende stap is om de gegevens van je &apos;Room&apos; via een C# script in te stellen (zoals bijvoorbeeld het maximaal aantal spelers, als je alleen hun handen / hoofd kan zien, als je met een code moet joinen...</p>
                            <p>Als dit gebeurt is, zou je met je eigen headset al in een multiplayerroom geraken.</p>
                            <p className={styles.descriptionIdea}>Testen van multiplayer</p>
                            <p>Als je in Unity werkt met een 3D-project of 2D-project kan je verschillende applicaties tegelijk runnen om te kijken als je met meer dan 1 speler tegelijk in de room geraakt.</p>
                            <p>In VR werkt dit een beetje anders, omdat je natuurlijk 2 headsets nodig zou hebben om dit te kunnen testen.</p>
                            <p>Van wat ik begrijp, moet je een kopie maken van je VR-project. In 1 van de 2 versies moet je dan een een nieuwe <span className={styles.codeish}>XR-plugin</span> installeren waardoor je je VR-controllers kan &apos;faken&apos; via je computer.</p>
                            <p>In deze versie moet je een <span className={styles.codeish}>Build</span> uitvoeren, en dan kan je opnieuw deze 2 applicaties tegelijk runnen.</p>
                            <p>Via een script kan je in de console iets gaan loggen om te kijken als er een nieuwe speler (je 2e versie dus) in de room geraakt.</p>
                            <p className={styles.descriptionIdea}>Aanmaken van avatars</p>
                            <p>Nu willen we natuurlijk de andere spelers ook kunnen zien in de room.</p>
                            <p>Hiervoor moet je terug een script schrijven die terug via <span className={styles.codeish}>Photon.Pun</span> zal checken als een speler de room joint, of hem terug verlaat, en aan de hand daarvan een avatar tonen.</p>
                            <p>Aangezien meerdere spelers kunnen spawnen in de room, moet je ervoor zorgen dat deze avatar een <span className={styles.codeish}>prefab</span> is. Sleep deze model dus gewoon in je &apos;Prefabs-folder&apos;.</p>
                            <p>Op de prefab moet je nog een <span className={styles.codeish}>Photon View Component</span> toevoegen. Deze component zal alle data verzamelen die je nodig hebt om de spelers te synchroniseren.</p>
                            <br></br>
                            <p className={styles.descriptionIdea}>In mijn room</p>
                            <p>Op het eerste zicht lijkt dit wel mee te vallen. Een room creÃ«ren waar je meerdere spelers kan zien op het zelfde moment is doenbaar.</p>
                            <p>Wat iets uitdagender is, is om dit te doen met een verhaallijn. Iedere speler heeft een intro, en zal dus op andere tijdstippen op de &apos;doorgaan&apos; knoppen drukken.</p>
                            <p>Ik nog geen uitgebreide tutorial gevonden hoe dit probleem wordt opgelost.</p>
                            <p>Velen maken een wacht-functie nadat er op de laatste &apos;doorgaan&apos; knop is gedrukt, dus dat kan je misschien wel eens uitproberen.</p>
                            <p>Laat de spelers pas spawnen als de room zogezegd vol zit.</p>
                            <p>Deze room zal wel een denkbeeldige room moeten zijn, aangezien je de &apos;Play&apos; knoppen de andere knoppen & de verhaallijn niet wilt overslaan voor de andere spelers.</p>
                        </div>
                    </div>
                    <div className={styles.flexStepButtons}>
                        <Link href="baked-lighting"><p className={styles.stepButton}>&larr; previous</p></Link>
                        <Link href="project-build"><p className={styles.stepButton}>next &rarr;</p></Link>
                    </div>
                </main>

                <footer className={styles.footer}>
                    <p>by: Erin Troch</p>
                </footer>
            </div>
        </>
    )
}