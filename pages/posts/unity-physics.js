import Head from 'next/head'
import Image from 'next/image'
import styles from '../../styles/Home.module.css'
import Link from 'next/link'

import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faArrowDown } from '@fortawesome/free-solid-svg-icons'

export default function UnityPhysics() {
    return (
        <>
            <div className={styles.container}>
                <Head>
                    <title>Unity Physics</title>
                    <meta name="description" content="Generated by create next app" />
                    <link rel="icon" href="/favicon.ico" />
                </Head>

                <main className={styles.main}>
                    <h1 className="title">
                        Unity Physics
                    </h1>
                    <div className={styles.divMaxI}>
                        <p>Dit wordt een langer artikel... hou je vast!</p>
                        <p>Aangezien ik een escaperoom maak in VR, wilt dit dus zeggen dat we dingen moeten kunnen vastnemen, gooien, verplaatsen...</p>
                        <p>Na het invoeren van de test-models besloot ik om even te experimenteren met de verschillende basis-interactiemogelijkheden.</p>
                    </div>
                    {/* <p className={styles.description}>
                        Get started by editing{' '}
                        <code className={styles.code}>pages/index.js</code>
                    </p> */}

                    <div className={styles.grid}>
                        <div className={styles.cardLong}>
                            <Image className={styles.cardLongImage} src="/unity-physics-head.png" height={175} width={800} />
                            <br></br>
                            <br></br>
                            <h2>Interacties</h2>
                            <p className={styles.descriptionIdea}>XR Rig</p>
                            <p>Vooraleer we zwaartekracht gebruiken of dingen willen vastnemen moeten we eerste onze controllers ook op het scherm zien. Dit doen we via een <span className={styles.codeish}>XR Rig</span>.</p>
                            <p>Als je het startbestand van Unity VR hebt gebruikt, zal je zien dat dit al aanwezig is in je project.</p>
                            <p>Als dit nog niet het geval is, zal je volgende dingen moeten aanmaken: Maak eerst een Empty gameObject aan, en noem het XR Rig. In je XR Rig steek je je Main Camera, je Left- en Righthand Controller.</p>
                            <p>Aan beide controllers koppel je het &apos;XR-Controller (action based)&apos; script, en je zou goed moeten zitten om te beginnen.</p>
                            <div className={styles.flexIconDiv}>
                                <FontAwesomeIcon icon={faArrowDown} width={30} height={30} />
                            </div>
                            <p className={styles.descriptionIdea}>Gravity</p>
                            <p>Om te beginnen wilde ik de zwaartekracht eens uitoefenen op een object. We beginnen met het toevoegen van een Box Collider op de muren / vloer / plafont van onze kamer. Dit doe je via <span className={styles.codeish}>add Component</span> &rarr; <span className={styles.codeish}>Box Collider</span>.</p>
                            <p>We willen de zwaartekracht op een balletje laten werken. Voeg op je balletje een &apos;Sphere Collider&apos; toe net zoals je een Box Collider zou toevoegen.</p>
                            <p>Daarna voeg je ook de <span className={styles.codeish}>Rigidbody</span> component toe op je object, en vink je <span className={styles.codeish}>Use Gravity</span> aan.</p>
                            <p>Positioneer je balletje een meter boven de grond, en druk op &apos;Play&apos; van je project. Je balletje zou nu op de grond moeten vallen.</p>
                            <p>Uiteraard kan je spelen met de verschillende waarden van de componenten, maar daar ga ik nu niet dieper op in gaan. Kijk gerust enkele tutorials die meer in detail gaan over het gebruik van zwaartekracht, maar dit als basis zou moeten volstaan.</p>
                            <p className={styles.subDescription}>Complexere objecten</p>
                            <p>Op een balletje kan je gemakkelijk een Sphere Collider toevoegen, maar op een plant?</p>
                            <p>Om op complexere objecten een Collider te zetten, maken we vaak gebruiken van de component <span className={styles.codeish}>Mesh Collider</span>. Mesh Collider zal zijn uiterste best doen om de vorm van je object zo goed mogelijk te volgen, maar heeft ook zijn gebreken.</p>
                            <p>Als je een kastje hebt bijvoorbeeld, zal de Mesh Collider de holte niet herkennen, en dus opvullen met een denkbeeldig vlak, met als gevolg dat je er dus niets kan ingooien bijvoorbeeld.</p>
                            <Image className={styles.cardLongImage} src="/unity-physics-tennis.png" height={175} width={800} />
                            <p>Om dit op te lossen zal je moeten werken met verschillende Box Colliders binnen 1 object. Je kan dit best doen door een &apos;Create Empty&apos; te doen, en je Box Colliders toe te voegen op de Empty GameObjects.</p>
                            <p>Dit is redelijk wat werk, maar zeker de moeite!</p>
                            <p className={styles.descriptionIdea}>Grabbable Object</p>
                            <p>Stel, we willen het balletje nu ook vastnemen met onze handen (controllers).</p>
                            <p>Daarvoor voegen we simpelweg een nieuwe component genaamd <span className={styles.codeish}>XR Grab Interactable</span> toe aan ons object.</p>
                            <p>Zorg ook zeker dat volgende parameters correct staan:</p>
                            <Image className={styles.cardLongImage} src="/unity-physics-grab.png" height={350} width={800} />
                            <p>Extra:</p>
                            <p>Een bal was nu een vrij eenvoudig voorwerp, maar wat als je complexere objecten wilt vastnemen?</p>
                            <p>Een rugzak bijvoorbeeld wil je niet in het midden, maar een het lusje vastpakken. Rechter-klik op je object, <span className={styles.codeish}>Create Empty</span> en geef je Empty GameObject de naam &apos;Attach&apos;.</p>
                            <p>Nu kan je je &apos;Attach&apos; herpositioneren naar de lus van je rugzak.</p>
                            <p>Sleep nu je &apos;Attach&apos; in de <span className={styles.codeish}>Attach Transform</span> van je <span className={styles.codeish}>XR Grab Interactable</span>, en voila! Je kan nu rugzak vastnemen een het lusje.</p>
                            <Image className={styles.cardLongImage} src="/unity-physics-attach.png" height={175} width={800} />
                            <p>Nu je eerder welk voorwerp kunt vastnemen, kan je er ook al mee gooien. Zorg dat ieder element in je scene enkele Mesh Colliders of Box Colliders hebben, anders zal je object onwerkelijk reageren op sommige andere objecten.</p>
                            <p className={styles.descriptionIdea}>Andere Physics</p>
                            <p>Er zijn nog tal van mogelijkheden, maar voorlopen neem ik genoegen met deze basis-interacties.</p>
                            <p>Later zal ik nog uitzoeken hoe je met verschillende <span className={styles.codeish}>Joint Components</span> een ketting kan maken, een deur kan openen, of een kastje kan openen.</p>
                        </div>
                    </div>
                    <div className={styles.flexStepButtons}>
                        <Link href="mogelijkheden-in-vr"><p className={styles.stepButton}>&larr; previous</p></Link>
                        <Link href="onderzoek-vr"><p className={styles.stepButton}>next &rarr;</p></Link>
                    </div>
                </main>

                <footer className={styles.footer}>
                    <p>by: Erin Troch</p>
                </footer>
            </div>
        </>
    )
}