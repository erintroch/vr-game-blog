import Head from 'next/head'
import Image from 'next/image'
import styles from '../../styles/Home.module.css'
import Link from 'next/link'

import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faArrowDown } from '@fortawesome/free-solid-svg-icons'

export default function KleineAnimatie() {
    return (
        <>
            <div className={styles.container}>
                <Head>
                    <title>Kleine Animatie</title>
                    <meta name="description" content="Generated by create next app" />
                    <link rel="icon" href="/favicon.ico" />
                </Head>

                <main className={styles.main}>
                    <h1 className="title">
                        Kleine Animatie
                    </h1>
                    <div className={styles.divMaxI}>
                        <p>Ik was het eventjes beu om constant bezig te zijn met de UI van de escaperoom, dus wilde ik eens iets anders doen.</p>
                        <p>Ik wilde al heel lang geanimeerde vissen en zeewier in mijn scene zetten, en dat is exact wat ik nu ga doen.</p>
                    </div>
                    {/* <p className={styles.description}>
                        Get started by editing{' '}
                        <code className={styles.code}>pages/index.js</code>
                    </p> */}

                    <div className={styles.grid}>
                        <div className={styles.cardLong}>
                            <h2>Kleine animaties</h2>
                            <p className={styles.descriptionIdea}>Onderzoek</p>
                            <p>Ik had eerder al vis-models gemaakt, en nu was het tijd om deze in de scene te laten rondzwemmen.</p>
                            <p>Eerst ging ik opzoek naar de animatie-mogelijkheden in Unity.</p>
                            <p>Het animeren van fbx-models, maar ook van het gebruik van <span className={styles.codeish}>Shader Graphs</span> werd erg veel gesproken.</p>
                            <p className={styles.extra}>Wat is een Shader Graph?</p>
                            <p>Een Shader Graph is een soort van tool waarmee je <span className={styles.codeish}>Materials</span> in Unity kan manipuleren.</p>
                            <p>Zo kan je bijvoorbeeld een regenboog-patroon bekomen met 1 material, maar kan je je Material ook animeren.</p>
                            <p>Vooral het animatie-deel vond ik iets heel raars. Hoe kan je nu een material animeren?</p>
                            <p>Ik ging dus opzoek naar uitleg en tutorials van Shader Graphs, en verloor onmiddelijk de motivatie om hier iets mee te doen. De structuren dat je hiermee moet maken om tot een leuk resultaat te komen was ongezien.</p>
                            <p>Om even een voorbeeld te geven van een Shader Graph:</p>
                            <Image className={styles.cardLongImage} src="/ex-shaderGraph.png" height={350} width={800} />
                            <p>Dit is Chinees voor mij, dus liet ik dit even voor wat het was.</p>
                            <p className={styles.descriptionIdea}>Visjes - FBX</p>
                            <p>Ik besloot om mijn visjes te animeren via <span className={styles.codeish}>Cinema 4D</span>. Ik heb nu wel al redelijk wat model-ervaring, dus dat ging best vlot.</p>
                            <p>Ik animeerde de vissen met behulp van Deformers in C4D, en op een 20-tal minuten had ik een prachtig geanimeerde vis.</p>
                            <p>Wat ik niet wist, is dat veel convert-formaten geen deformers en gekke tools ondersteunen.</p>
                            <p>FBX was hier natuurlijk 1 van. Ik exporteerde mijn vis naar Unity, maar zag geen teken van leven in de vissen.</p>
                            <p>Ik moest dus anders tewerk gaan met het animeren van de vissen, en zorgde ervoor dat ieder segment van de vis apart kon draaien. Over deze animatie deed ik 45 minuten, maar ik had eindelijk een vis die wel ondersteund werd door Unity.</p>
                            <Image className={styles.cardLongImage} src="/visje.png" height={175} width={800} />
                            <p>Om animatie in de vis te steken, moeten we terug naar de parent-model van de vis gaan, en een clip maken van de animatie.</p>
                            <p>Deze clip kunnen we nu letterlijk van C4D nemen, dus dat spaart ons wat werk. Open terug je <span className={styles.codeish}>Animator</span>, en sleep je clip in de Animator.</p>
                            <Image className={styles.cardLongImage} src="/visjeAnim.png" height={175} width={800} />
                            <p>In de animator-component van je visje mag je de animatie nu wel op loop laten staan, aangezien de vis constant zal rondzwemmen.</p>
                            <p>De laatste stap is terug een Script schrijven om de positie van de vis ook te animeren. Ik werkte met een <span className={styles.codeish}>Vector3.forward</span> in combinatie met <span className={styles.codeish}>Rotatie</span> om de vis in een cirkel te laten zwemmen.</p>
                            <p className={styles.descriptionIdea}>Zeewier - Shader Graph</p>
                            <p>JA! JE LEEST HET GOED!</p>
                            <p>Ik ga de Shader Graph-uitdaging aan!</p>
                            <p>Aangezien het nog steeds de bedoeling is om zoveel mogelijk bij te leren over Unity, besloot ik om toch die Shader Graphs uit te proberen.</p>
                            <p>Na het volgen van enkele basis-tutorials over Shader Graphs, begon ik de verschillende basis-componenten een beetje te begrijpen.</p>
                            <p>Eigenlijk is het een kwestie van veel proberen, logisch nadenken, en vooral begrip hebben van de mogelijkheden.</p>
                            <p>Eerste maakte ik een nieuw mapje aan, genaamd Shader Graphs. In dit mapje moet je eerst een nieuwe <span className={styles.codeish}>Material</span> aanmaken, en een Shader Graph via <span className={styles.codeish}>Create</span> &rarr; <span className={styles.codeish}>Shader</span> &rarr; <span className={styles.codeish}>Universal Render Pipeline</span> &rarr; <span className={styles.codeish}>Lit Shader Graph</span>.</p>
                            <p>Geef dan je material een Shader, en zoek naar je eigen Graph Shader:</p>
                            <Image className={styles.cardLongImage} src="/shaderGraphInfo.png" height={175} width={800} />
                            <p>Open je Shader Graph. Deze zou bovenaan naast je Scene & Game moeten openen.</p>
                            <Image className={styles.cardLongImage} src="/shaderGraphPos.png" height={350} width={800} />
                            <p>Nu is het een kwestie van allerlei nieuwe objecten aan te maken, en een leuke structuur te bekomen. Ik raad aan hier tutorials over te volgen voor een beter inzicht in deze verschillende componenten.</p>
                            <p>Mijn Shader Graph voor een smooth-bewegend-zeewierblaadje zag er zo uit. Ik weet dat je hier waarschijnlijk niet erg veel aan hebt, maar zoals ik al zei: Het is echt een kwestie van uitzoeken.</p>
                            <Image className={styles.cardLongImage} src="/shaderGraph.png" height={350} width={800} />
                            <p>De laatste stap is om deze material toe te voegen aan de zeewier-model, en voila!</p>
                        </div>
                    </div>
                    <div className={styles.flexStepButtons}>
                        <Link href="oxygen-bar"><p className={styles.stepButton}>&larr; previous</p></Link>
                        <Link href="opdrachten"><p className={styles.stepButton}>next &rarr;</p></Link>
                    </div>
                </main>

                <footer className={styles.footer}>
                    <p>by: Erin Troch</p>
                </footer>
            </div>
        </>
    )
}